
function [U, est_labels, misclass_collect] = KSS(Z, K, true_labels, d, opts)
    
    %%%%%%%%%%%%%% K-subspaces method for subspace clustering %%%%%%%%%%%%%%
    fprintf('********* K-Subspaces Method for Subspace Clustering *********\n');

    %% default parameter setting
    iternum = opts.iternum;  
    tol = opts.tol; 
    tau = opts.tau;
    init = opts.init;
    if isfield(opts,'print')
        print = opts.print;
    else
        print = 0;
    end
    [~, N] = size(Z);
    
    %% set the initial membership matrix H
    if init == 1 % random initialization 
        est_labels = randi([1 K], N, 1);      
    else % initialization generated by TIP
        est_labels = TIPS(Z, K, tau); 
    end

    %% set the initial point U
    for k = 1:K
        Zk = Z(:, est_labels==k); 
        GU = Zk * Zk';    
        [U{k},~] = eigs(GU, d);    
    end
    
    misclass_points = misRate(true_labels, est_labels); misclass_collect(1) = misclass_points;
    fprintf('num misclass points of init: %d \n', misclass_points);
    
    for iter = 1:iternum
        
        est_labels_old = est_labels;

        %% update step: update each block Uk alternately for k = 1,...,K
        for k = 1:K                 
            
            %% update step
            Zk = Z(:, est_labels==k);
            GU = Zk*Zk';
                          
            %% update Uk
            [U1,D] = eigs(GU, d); U{k} = U1;
            if misclass_collect(iter)/N < 0.1/K                
                eig_vals = diag(D); 
                eig_vals_1 = eig_vals(1:d-1); eig_vals_2 = eig_vals(2:d);
                eig_gap = eig_vals_1 - eig_vals_2;
                [~,dk] = max(eig_gap);
                U{k} = U1(:,1:dk);
            else
                U{k} = U1;
            end
            
            %% compute GH 
            GH(:,k) = vecnorm(U{k}'*Z);
            
        end       
        
        %% assignment step
        est_labels = zeros(N,1);     
        for i = 1:N
           [~,est_labels(i)] = max(GH(i,:));
        end
        
        %% record and print update information        
        misclass_points = misRate(true_labels, est_labels);
        misclass_collect(iter+1) = misclass_points;   
        
        if print == 1   
            fprintf('iternum: %d, num misclass points: %d \n', ...
                iter, misclass_points);
        end
        
        if misRate(est_labels_old, est_labels) <= tol
            break;
        end
        
    end

end










%             %% compute the residual
%             if print == 1
%                 grad_k = M*U{k}; 
%                 resi = U{k} + grad_k; 
%                 [U1,~,V1] = svd(resi,'econ');
%                 gap(k) = norm(U{k} - U1*V1', 'fro');
%             end
